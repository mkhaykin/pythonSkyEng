"""init

Revision ID: f8b3743b202b
Revises:
Create Date: 2023-09-12 07:16:41.838569

"""
from typing import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'f8b3743b202b'
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

func_ddl = """
    CREATE FUNCTION public.refresh_updated_at()
    RETURNS TRIGGER
    LANGUAGE plpgsql NOT LEAKPROOF AS
    $BODY$
        BEGIN
           NEW.updated_at := now();
            RETURN NEW;
        END
    $BODY$;
"""


def upgrade() -> None:
    op.execute(func_ddl)
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'users',
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('username', sa.String(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('psw_hash', sa.String(), nullable=False),
        sa.Column('disabled', sa.Boolean(), server_default='f', nullable=False),
        sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email', name='uc_email'),
        sa.UniqueConstraint('username', name='uc_username'),

    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table(
        'files',
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('original_name', sa.String(), nullable=False),
        sa.Column('replaced_id', sa.UUID(), nullable=True),
        sa.Column('replaced_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('checked_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('checked_result', sa.String(), server_default='', nullable=True),
        sa.Column('send_result_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', name='uc_name'),
    )
    op.create_index(op.f('ix_files_name'), 'files', ['name'], unique=True)
    op.create_index(op.f('ix_files_original_name'), 'files', ['original_name'], unique=False)
    op.create_index(op.f('ix_files_replaced_id'), 'files', ['replaced_id'], unique=False)
    # ### end Alembic commands ###
    for name in ('users', 'files'):
        trig_ddl = """
            CREATE TRIGGER tr_{}_updated_at BEFORE UPDATE
            ON {}
            FOR EACH ROW EXECUTE PROCEDURE
            refresh_updated_at();
            """.format(name, name)
        op.execute(trig_ddl)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_files_replaced_id'), table_name='files')
    op.drop_index(op.f('ix_files_original_name'), table_name='files')
    op.drop_index(op.f('ix_files_name'), table_name='files')
    op.drop_table('files')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
    for name in ('users', 'files'):
        op.execute(f'drop trigger if exists tr_{name}_updated_at on confirm cascade;')

    op.execute('drop function if exists refresh_updated_at;')
